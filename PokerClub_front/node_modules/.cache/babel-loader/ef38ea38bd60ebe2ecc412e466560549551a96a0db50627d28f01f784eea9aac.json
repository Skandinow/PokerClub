{"ast":null,"code":"import Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: []\n    };\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n  },\n  beforeCreate() {\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/jwt\", {\n        login,\n        password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onRegister\", (name, login, password) => {\n      name = name.trim();\n      login = login.trim();\n      password.trim();\n      if (name === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name is required\");\n        return;\n      } else if (login === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login is required\");\n        return;\n      } else if (password === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/users\", {\n        name,\n        login,\n        password\n      }).then(() => {\n        this.$root.$emit(\"onEnter\", login, password);\n        axios.get(\"/api/1/users\").then(response => {\n          this.users = response.data;\n        });\n      }).catch(error => {\n        this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onJwt\", jwt => {\n      localStorage.setItem(\"jwt\", jwt);\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"));\n    });\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n  }\n};","map":{"version":3,"mappings":"AASA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;IACA;IAEAC;MACA;IACA;EACA;EACAC;IACA;MACA;QACA;QACA;MACA;MAEAD;QACAE;QAAAC;MACA;QACAC;QACA;MACA;QACA;MACA;IACA;IAEA;MACAb;MACAW;MACAC;MACA;QACA;QACA;MACA;QACA;QACA;MACA;QACA;QACA;MACA;MACAH;QACAT;QAAAW;QAAAC;MACA;QACA;QACAH;UACA;QACA;MACA,GACAK;QACA,WACAC;MACA;IAEA;IAGA;MACAF;MAEAJ;QACAO;UACAC;QACA;MACA;QACA;QACA;MACA;IACA;IAEA;MACAJ;MACA;IACA;EAEA;AACA","names":["name","components","Footer","Middle","Header","data","user","posts","beforeMount","axios","beforeCreate","login","password","localStorage","catch","$emit","params","jwt"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <Header :user=\"user\"/>\n    <Middle :posts=\"posts\"/>\n    <Footer/>\n  </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\"\n\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: []\n    }\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n  },\n  beforeCreate() {\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n\n      axios.post(\"/api/1/jwt\", {\n        login, password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n\n    this.$root.$on(\"onRegister\", (name, login, password) => {\n      name = name.trim();\n      login = login.trim();\n      password.trim();\n      if (name === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name is required\");\n        return;\n      } else if (login === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login is required\");\n        return\n      } else if (password === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Password is required\");\n        return\n      }\n      axios.post(\"/api/1/users\", {\n        name, login, password\n      }).then(() => {\n        this.$root.$emit(\"onEnter\", login, password);\n        axios.get(\"/api/1/users\").then(response => {\n          this.users = response.data;\n        });\n      })\n          .catch(error => {\n            this.$root\n                .$emit(\"onRegisterValidationError\", error.response.data);\n          });\n\n    });\n\n\n    this.$root.$on(\"onJwt\", (jwt) => {\n      localStorage.setItem(\"jwt\", jwt);\n\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"))\n    });\n\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n\n  }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}